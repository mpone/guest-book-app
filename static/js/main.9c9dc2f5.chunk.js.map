{"version":3,"sources":["components/Header/Header.js","components/MessageForm/MessageForm.js","components/LoadingSpinner/LoadingSpinner.js","components/MessagesList/MessagesList.js","api/messagesApi.js","App.js","index.js"],"names":["Header","className","MessageForm","addMessageToServer","useState","name","setName","text","setText","noName","noText","errors","setErrors","onSubmit","event","preventDefault","trim","handleFormSubmit","type","placeholder","value","onChange","target","rows","maxLength","LoadingSpinner","MessagesList","list","messagesEndRef","useRef","useEffect","current","scrollIntoView","behavior","length","map","message","key","messageId","date","moment","format","ref","defaultProps","MESSAGES_URL","process","getMessages","a","fetch","response","json","addMessage","method","headers","body","JSON","stringify","App","messagesList","setMessagesList","getMessagesFromServer","data","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9c9dc2f5.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.scss';\n\nexport const Header = () => {\n  return (\n    <header className=\"header\">\n      <h1 className=\"header__title\">\n        My guest book\n      </h1>\n    </header>\n  );\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './MessageForm.scss';\n\nexport const MessageForm = ({\n  addMessageToServer,\n}) => {\n  const [name, setName] = useState('');\n  const [text, setText] = useState('');\n  const [errors, setErrors] = useState({\n    noName: false,\n    noText: false,\n  })\n  \n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n\n    if (!name.trim() && !text.trim()) {\n      setErrors({\n        noName: true,\n        noText: true,\n      });\n      return;\n    }\n\n    if (!name.trim()) {\n      setErrors({ noName: true });\n      return;\n    }\n\n    if (!text.trim()) {\n      setErrors({ noText: true });\n      return;\n    }\n    addMessageToServer(text, name);\n    setName('');\n    setText('');\n  }\n  \n  return (\n    <article className=\"message-form\">\n      <form\n        className=\"message-form form\"\n        onSubmit={(event) => handleFormSubmit(event)}\n      >\n        <article className=\"form__inputs\">\n          {errors.noName && !errors.noText && (\n            <span className=\"form__error\">Please enter your name</span>\n          )}\n\n          {errors.noText && !errors.noName && (\n            <span className=\"form__error\">Please enter your message</span>\n          )}\n\n          {errors.noName && errors.noText && (\n            <span className=\"form__error\">Please enter your name and message</span>\n          )}\n  \n          <input\n            className=\"form__name\"\n            type=\"text\"\n            placeholder=\"Your name\"\n            value={name}\n            onChange={({ target }) => {\n              setName(target.value);\n              setErrors({ noName: false });\n            }}\n          />\n\n          <textarea\n            className=\"form__text\"\n            placeholder=\"Message\"\n            rows=\"3\"\n            maxLength=\"1000\"\n            value={text}\n            onChange={({ target }) => {\n              setText(target.value);\n              setErrors({ noText: false });\n            }}\n          />\n        </article>\n\n        <button\n          className=\"form__button\"\n          type=\"submit\"\n        >\n          Add\n          <br />\n          comment\n        </button>\n      </form>\n    </article>\n  );\n};\n\n\nMessageForm.propTypes = {\n  addMessageToServer: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './LoadingSpinner.scss';\n\nexport const LoadingSpinner = () => (\n  <article className=\"spinner\">\n    <div className=\"lds-spinner\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\n  </article>\n);\n","import React, { useEffect, useRef } from 'react';\nimport './MessagesList.scss';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\n\nimport { LoadingSpinner } from '../LoadingSpinner';\n\nexport const MessagesList = ({ list }) => {\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(scrollToBottom, [list]);\n\n  return (\n    <article className=\"messages\">\n      {list.length === 0 && (\n        <LoadingSpinner />\n      )}\n      \n      <ul className=\"messages__list\">\n        {list.map(\n          message => (\n            <li\n              key={message.messageId}\n              className=\"messages__item\"\n            >\n              <span className=\"messages__text\">\n                {message.text}\n              </span>\n\n              <span className=\"messages__name\">\n                {`From ${message.name}`}\n              </span>\n\n              {message.date && (\n                <span className=\"messages__date\">\n                  { moment(message.date).format('MMM Do, h:mm A') }\n                </span>\n              )}\n            </li>\n          )\n        )}\n\n        <span ref={messagesEndRef} />\n      </ul>\n    </article>\n  );\n};\n\nMessagesList.propTypes = {\n  list: PropTypes.arrayOf(\n    PropTypes.shape({\n      messageId: PropTypes.number,\n      text: PropTypes.string,\n      name: PropTypes.string,\n      date: PropTypes.date,\n    }),\n  ),\n};\n\nMessagesList.defaultProps = {\n  list: [],\n};\n","const API_URL = process.env.REACT_APP_API_URL;\nconst MESSAGES_URL = `${API_URL}/messages`;\n\nexport const getMessages = async () => {\n  const response = await fetch(MESSAGES_URL);\n  \n  return response.json();\n};\n\nexport const addMessage = async (text, name) => {\n  const response = await fetch(MESSAGES_URL, {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json; charset=utf-8',\n    },\n    body: JSON.stringify({\n      text,\n      name,\n    }),\n  });\n  \n  return response.json();\n};","import React, { useState, useEffect } from 'react';\nimport './App.scss';\n\nimport { Header } from './components/Header';\nimport { MessageForm } from './components/MessageForm';\nimport { MessagesList} from './components/MessagesList';\n\nimport { getMessages, addMessage } from './api/messagesApi';\n\nfunction App() {\n  const [messagesList, setMessagesList] = useState([]);\n\n  const getMessagesFromServer = async () => {\n    const data = await getMessages();\n\n    return setMessagesList(data);\n  }\n\n  useEffect(() => getMessagesFromServer(), []);\n\n  const addMessageToServer = async (text, name) => {\n    await addMessage(text, name);\n    getMessagesFromServer();\n  }\n\n  return (\n    <div className=\"App\">\n      <section className=\"content\">\n        <Header />\n\n        <main className=\"main\">\n          <MessagesList\n            list={messagesList}  \n          />\n\n          <MessageForm\n            addMessageToServer={addMessageToServer}\n          />\n        </main>\n      </section>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}